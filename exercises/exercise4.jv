pipeline TemperatureDataPipeline {

    // Define steps in the pipeline
    TemperatureDownloader -> ZipExtractor -> FilePicker -> CSVReader
    -> ColumnSelector -> ColumnRenamer -> TemperatureTransformer -> Validator
    -> SQLiteWriter;

    // Download the ZIP file
    block TemperatureDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
        retries: 5;
    }

    // Extract the ZIP archive
    block ZipExtractor oftype ArchiveInterpreter {
        archiveType: "zip";
        destination: "./temp_unzip";
    }

    // Pick the required CSV file
    block FilePicker oftype FileSelector {
        path: "./temp_unzip/data.csv";
    }

    // Read the CSV file
    block CSVReader oftype CSVInterpreter {
        delimiter: ";";
        header: true;
    }

    // Select only the required columns
    block ColumnSelector oftype ColumnFilter {
        columns: [
            "Geraet", 
            "Hersteller", 
            "Model", 
            "Monat", 
            "Temperatur in 째C (DWD)", 
            "Batterietemperatur in 째C"
        ];
    }

    // Rename columns from German to English
    block ColumnRenamer oftype ColumnMapper {
        mapping: {
            "Geraet": "id",
            "Hersteller": "producer",
            "Model": "model",
            "Monat": "month",
            "Temperatur in 째C (DWD)": "temperature",
            "Batterietemperatur in 째C": "battery_temperature"
        };
    }

    // Transform temperature columns from Celsius to Fahrenheit
    block TemperatureTransformer oftype ColumnTransformer {
        columns: ["temperature", "battery_temperature"];
        transform: CelsiusToFahrenheit;
    }

    transform CelsiusToFahrenheit {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;
        fahrenheit: (celsius * 9/5) + 32;
    }

    // Validate data before storing it
    block Validator oftype TableValidator {
        columns: [
            "id" oftype bigint { constraints: [PositiveIdConstraint] },
            "producer" oftype text,
            "model" oftype text,
            "month" oftype text,
            "temperature" oftype float,
            "battery_temperature" oftype float
        ];
    }

    constraint PositiveIdConstraint on bigint: value > 0;

    // Write the data into SQLite
    block SQLiteWriter oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}