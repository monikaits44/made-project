pipeline WeatherDataPipeline {

    // Define the overall pipeline flow
    DataFetcher 
        -> ArchiveHandler
        -> CSVSelector 
        -> CSVProcessor
        -> RenameHeadersPart1
        -> RenameHeadersPart2
        -> TemperatureConverter
        -> BatteryTempConverter
        -> SQLiteSaver;

    // 1. Fetch the zipped data file
    block DataFetcher oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
        retries: 5;
    }

    // 2. Unzip the downloaded archive
    block ArchiveHandler oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // 3. Select the required CSV file
    block CSVSelector oftype FilePicker {
        path: "/data.csv";
    }

    // 4. Parse the CSV file
    block CSVProcessor oftype CSVInterpreter {
        delimiter: ";";
    }

    // 5. Rename column headers (Part 1)
    block RenameHeadersPart1 oftype CellWriter {
        at: range A1:E1;
        write: ["device_id", "manufacturer", "device_model", "record_month", "temperature"];
    }

    // 6. Rename column headers (Part 2)
    block RenameHeadersPart2 oftype CellWriter {
        at: cell J1;
        write: ["battery_temp"];
    }

    // 7. Convert "temperature" values from Celsius to Fahrenheit
    transform CelsiusToFahrenheit {
        from CelsiusInput oftype decimal;
        to FahrenheitOutput oftype decimal;

        FahrenheitOutput: (CelsiusInput * 9/5) + 32;
    }

    block TemperatureConverter oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: CelsiusToFahrenheit;
    }

    // 8. Convert "battery_temp" values from Celsius to Fahrenheit
    block BatteryTempConverter oftype TableTransformer {
        inputColumns: ["battery_temp"];
        outputColumn: "battery_temp";
        uses: CelsiusToFahrenheit;
    }

    // 9. Validate column types and define constraints
    valuetype device_id oftype integer {
        constraints: [
            constraint PositiveDeviceId {
                check: value > 0;
            }
        ];
    }

    valuetype record_month oftype integer {
        constraints: [
            constraint MonthRange {
                check: value >= 1 && value <= 12;
            }
        ];
    }

    block TableStructureValidator oftype TableInterpreter {
        header: true;
        columns: [
            "device_id" oftype device_id,
            "manufacturer" oftype text,
            "device_model" oftype text,
            "record_month" oftype record_month,
            "temperature" oftype decimal,
            "battery_temp" oftype decimal
        ];
    }

    // 10. Save the processed data to an SQLite database
    block SQLiteSaver oftype SQLiteLoader {
        table: "weather_data";
        file: "./temperatures.sqlite";
    }

}