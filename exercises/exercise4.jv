pipeline TemperatureDataPipeline {

    // Step 1: Download the dataset
    DataDownloader -> Unzipper -> CSVReader -> DataCleaner -> ColumnRenamer -> TemperatureConverter -> DataValidator -> SQLiteWriter;

    // Download data from the given URL
    block DataDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
        retries = 5;
    }

    // Extract the downloaded ZIP file
    block Unzipper oftype ZipExtractor {
        input = "./mowesta-dataset-20221107.zip";
        output = "./temp_data";
    }

    // Read the extracted CSV file
    block CSVReader oftype CSVInterpreter {
        input = "./temp_data/data.csv";
        delimiter = ",";
        hasHeader = true;
    }

    // Clean the data to include only relevant columns and rows
    block DataCleaner oftype ColumnAndRowFilter {
        columns = ["Geraet", "Hersteller", "Model", "Monat", "Temperatur in 째C (DWD)", "Batterietemperatur in 째C"];
        stopAfterColumn = "Geraet aktiv";  // Ignore all columns after "Geraet aktiv"
    }

    // Rename columns from German to English
    block ColumnRenamer oftype ColumnMapper {
        mapping = {
            "Geraet" -> "id",
            "Hersteller" -> "producer",
            "Model" -> "model",
            "Monat" -> "month",
            "Temperatur in 째C (DWD)" -> "temperature",
            "Batterietemperatur in 째C" -> "battery_temperature"
        };
    }

    // Convert temperatures from Celsius to Fahrenheit
    block TemperatureConverter oftype ColumnTransformer {
        column = "temperature";
        transform = "(value * 9/5) + 32";
    }

    // Validate the data for correctness
    block DataValidator oftype TableValidator {
        columns = {
            "id" as integer { constraint PositiveIdConstraint },
            "producer" as text,
            "model" as text,
            "month" as text,
            "temperature" as decimal,
            "battery_temperature" as decimal
        };
    }

    constraint PositiveIdConstraint on integer {
        expression = "value > 0";
    }

    // Write the transformed data into an SQLite database
    block SQLiteWriter oftype SQLiteLoader {
        table = "temperatures";
        output = "./temperatures.sqlite";
    }
}