pipeline WeatherDataPipeline {

    // Pipeline structure
    DataFetcher 
        -> ArchiveHandler
        -> CSVSelector 
        -> CSVProcessor
        -> RenameHeaders_1
        -> RenameHeaders_2
        -> TemperatureConverter
        -> BatteryTempConverter
        -> SQLiteSaver;

    // BLOCK DEFINITIONS
    // 1. Download data from the given URL
    block DataFetcher oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // 2. Unzip the downloaded archive
    block ArchiveHandler oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // 3. Pick the specific CSV file from the archive
    block CSVSelector oftype FilePicker {
        path: "/data.csv";
    }

    // 4. Process the CSV file
    block CSVProcessor oftype CSVInterpreter {
        delimiter: ";";
    }

    // 5. Rename relevant column headers: Part 1
    block RenameHeaders_1 oftype CellWriter {
        at: range A1:E1;
        write: ["device_id", "manufacturer", "device_model", "record_month", "temperature"];
    }

    // 6. Rename relevant column headers: Part 2
    block RenameHeaders_2 oftype CellWriter {
        at: cell J1;
        write: ["battery_temp"];
    }

    // 7. Convert temperatures from Celsius to Fahrenheit for "temperature"
    transform CelsiusToFahrenheit {
        from CelsiusInput oftype decimal;
        to FahrenheitOutput oftype decimal;

        FahrenheitOutput: (CelsiusInput * 9/5) + 32;
    }

    block TemperatureConverter oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: CelsiusToFahrenheit;
    }

    // 8. Convert temperatures from Celsius to Fahrenheit for "battery_temp"
    block BatteryTempConverter oftype TableTransformer {
        inputColumns: ["battery_temp"];
        outputColumn: "battery_temp";
        uses: CelsiusToFahrenheit;
    }

    // 9. Define data types and validate columns
    constraint PositiveDeviceId on integer: value > 0;

    valuetype device_id oftype integer {
        constraints: [PositiveDeviceId];
    }

    constraint MonthRange on integer {
        lowerBound: 1;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    valuetype record_month oftype integer {
        constraints: [MonthRange];
    }

    block TableStructureValidator oftype TableInterpreter {
        header: true;
        columns: [
            "device_id" oftype device_id,
            "manufacturer" oftype text,
            "device_model" oftype text,
            "record_month" oftype record_month,
            "temperature" oftype decimal,
            "battery_temp" oftype decimal
        ];
    }

    // 10. Save the processed data to an SQLite database
    block SQLiteSaver oftype SQLiteLoader {
        table: "weather_data";
        file: "./weather_data.sqlite";
    }

}