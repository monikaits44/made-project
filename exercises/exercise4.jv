pipeline WeatherDataProcessing {

    // Pipeline structure
    DataDownloader 
        -> ArchiveExtractor
        -> CSVFileSelector 
        -> TextFileProcessor
        -> CSVProcessor
        -> HeaderRenamer1
        -> HeaderRenamer2
        -> DataValidator
        -> TempToFahrenheit
        -> BatteryTempToFahrenheit
        -> SQLiteDataSaver;

    // BLOCK DEFINITIONS
    block DataDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ArchiveExtractor oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block CSVFileSelector oftype FilePicker {
        path: "/data.csv";
    }

    block TextFileProcessor oftype TextFileInterpreter {}

    block CSVProcessor oftype CSVInterpreter {
        delimiter: ";";
    }

    block HeaderRenamer1 oftype CellWriter {
        at: range A1:E1;
        write: ["id", "producer", "model", "month", "temperature"];
    }

    block HeaderRenamer2 oftype CellWriter {
        at: cell J1;
        write: ["battery_temperature"];
    }

    transform CelsiusToFahrenheit {
        from CelsiusValue oftype decimal;
        to FahrenheitValue oftype decimal;

        FahrenheitValue: (CelsiusValue * 9 / 5) + 32;
    }

    block TempToFahrenheit oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: CelsiusToFahrenheit;
    }

    block BatteryTempToFahrenheit oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        uses: CelsiusToFahrenheit;
    }

    constraint PositiveID on integer:
        value > 0;

    valuetype id oftype integer {
        constraints: [PositiveID];
    }

    constraint MonthInRange on integer:
        lowerBound: 1;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    valuetype month oftype integer {
        constraints: [MonthInRange];
    }

    block DataValidator oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype id,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    block SQLiteDataSaver oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}
