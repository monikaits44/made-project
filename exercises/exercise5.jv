pipeline GTFSStopsProcessing {

    // Main processing flow
    GTFSDownloader 
        -> GTFSUnzipper
        -> GTFSFileExtractor
        -> GTFSContentReader
        -> GTFSTextToCSV
        -> GTFSDataFilter
        -> GTFSDatabaseSaver;

    // 1. Fetch the GTFS data from the provided URL
    block GTFSDownloader oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    // 2. Decompress the downloaded GTFS archive
    block GTFSUnzipper oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // 3. Select only the stops.txt file
    block GTFSFileExtractor oftype FilePicker {
        path: "./stops.txt";
    }

    // 4. Read the stops.txt file in UTF-8 format
    block GTFSContentReader oftype TextFileInterpreter {
        encoding: "utf8";
    }

    // 5. Convert the text data to a CSV format
    block GTFSTextToCSV oftype CSVInterpreter {
        delimiter: ",";
        enclosing: '"';
    }

    // 6. Validate and structure data using defined constraints and value types
    valuetype StopZoneID oftype integer {
        constraints: [ZoneConstraint];
    }

    constraint ZoneConstraint on integer: value == 1925;

    valuetype GeoPoint oftype decimal {
        constraints: [GeoRange];
    }

    constraint GeoRange oftype RangeConstraint {
        lowerBound: -90;
        upperBound: 90;
        lowerBoundInclusive: true;
        upperBoundInclusive: true;
    }

    valuetype StopNameType oftype text {
        encoding: "utf8";
    }

    block GTFSDataFilter oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype StopNameType,
            "stop_lat" oftype GeoPoint,
            "stop_lon" oftype GeoPoint,
            "zone_id" oftype StopZoneID
        ];
    }

    // 7. Store the processed data into a SQLite database
    block GTFSDatabaseSaver oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }
}