pipeline GTFSDataProcessingPipeline {

    // Main pipeline flow
    GTFSDownload 
        -> GTFSExtract 
        -> SelectStopsFile 
        -> ReadStopsFile 
        -> ConvertToCSV 
        -> FilterStopsData 
        -> SaveToDatabase;

    // 1. Download the GTFS ZIP file
    block GTFSDownload oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    // 2. Unzip the downloaded GTFS file
    block GTFSExtract oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // 3. Pick the 'stops.txt' file from the archive
    block SelectStopsFile oftype FilePicker {
        path: "./stops.txt";
    }

    // 4. Read the 'stops.txt' file
    block ReadStopsFile oftype TextFileInterpreter {
        encoding: "utf8";
    }

    // 5. Convert the file content to CSV format
    block ConvertToCSV oftype CSVInterpreter {
        delimiter: ",";
        enclosing: '"';
    }

    // Define valuetypes with constraints for validation
    valuetype ZoneID oftype integer {
        constraints: [MustBe1925];
    }

    constraint MustBe1925 on integer: value == 1925;

    valuetype GeoLatitude oftype decimal {
        constraints: [LatitudeRange];
    }

    valuetype GeoLongitude oftype decimal {
        constraints: [LongitudeRange];
    }

    constraint LatitudeRange oftype RangeConstraint {
        lowerBound: -90;
        upperBound: 90;
        lowerBoundInclusive: true;
        upperBoundInclusive: true;
    }

    constraint LongitudeRange oftype RangeConstraint {
        lowerBound: -180;
        upperBound: 180;
        lowerBoundInclusive: true;
        upperBoundInclusive: true;
    }

    valuetype StopName oftype text {
        encoding: "utf8";
    }

    // 6. Filter and validate data from the CSV
    block FilterStopsData oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype StopName,
            "stop_lat" oftype GeoLatitude,
            "stop_lon" oftype GeoLongitude,
            "zone_id" oftype ZoneID
        ];
    }

    // 7. Save the processed data to a SQLite database
    block SaveToDatabase oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }
}