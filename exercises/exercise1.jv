// Exercise 1: Airports Data Pipeline

pipeline AirportsDataPipeline {

  // Define the structure of the pipeline by connecting blocks via pipes.
  AirportsDataExtractor
    -> AirportsTextFileInterpreter
    -> AirportsCSVInterpreter
    -> AirportsTableInterpreter
    -> AirportsLoader;

  // Block to download CSV data from the provided URL.
  block AirportsDataExtractor oftype HttpExtractor {
    url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
  }

  // Interpret the downloaded file as a text file.
  block AirportsTextFileInterpreter oftype TextFileInterpreter { }

  // Interpret the text file as CSV with ";" as delimiter.
  block AirportsCSVInterpreter oftype CSVInterpreter {
    delimiter: ";";
  }

  // Define the table structure for the airports data.
  // Only include specified columns and assign appropriate SQLite types.
  block AirportsTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "Lfd. Nummer" oftype INTEGER,             // id
      "Name des Flughafens" oftype TEXT,        // name
      "Ort" oftype TEXT,                        // city
      "Land" oftype TEXT,                       // country
      "IATA" oftype TEXT,
      "ICAO" oftype TEXT,
      "Latitude" oftype FLOAT,
      "Longitude" oftype FLOAT,
      "Altitude" oftype INTEGER
    ];
  }

  // Load the interpreted table into a SQLite database called "airports.sqlite".
  block AirportsLoader oftype SQLiteLoader {
    table: "airports";
    file: "./airports.sqlite";
  }
}
